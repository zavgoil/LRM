version: '3.9'

services:
  db:
    image: postgres
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - db_net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 40s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - 5050:80
    networks:
      - db_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka_net

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    networks:
      - kafka_net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics --list --bootstrap-server kafka:9092"
        ]
      interval: 5s
      timeout: 60s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka_net

  user-service:
    container_name: user-service
    build:
      context: ./../
      dockerfile: docker/user-service/Dockerfile
      target: runner
    ports:
      - "50051:50051"
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER_TABLE_NAME: "app_user"
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_TELEGRAM_NOTIFICATION_TOPIC: ${KAFKA_TELEGRAM_NOTIFICATION_TOPIC}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - kafka_net
      - db_net
      - user_service_net

  telegram-notifier:
    container_name: telegram-notifier
    build:
      context: ./../
      dockerfile: docker/telegram-notifier/Dockerfile
      target: runner
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: db
      DB_PORT: 5432
      DB_TELEGRAM_USER_TABLE_NAME: "telegram_users"
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_TELEGRAM_NOTIFICATION_TOPIC: ${KAFKA_TELEGRAM_NOTIFICATION_TOPIC}
      KAFKA_CONSUMER_GROUP: "telegram_notifier"
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - kafka_net
      - db_net

  gui-client:
    container_name: gui-client
    build:
      context: ./../
      dockerfile: docker/gui-client/Dockerfile
      target: runner
    environment:
      - DISPLAY=$DISPLAY
      - QT_X11_NO_MITSHM=1
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    depends_on:
      - user-service
    networks:
      - user_service_net

networks:
  db_net:
    driver: bridge
  kafka_net:
    driver: bridge
  user_service_net:
    driver: bridge
